Работа с многофайловыми проектами.
Видимо речь идет о C++.
Если в C# принято создавать для каждого класса новый файл, то в C++ такого не особо замечено
это просто лирика, я читал, что такой подход затруднителен для программистов на C++.

Включать файлы в проект позволяет дериктива #include.
Она имеет два вида написания, со скобками  < > и с кавычками " ".
Если используется написание со скобками < > - значит поиск этого файла будет осуществляться
в папке стандартной библиотеки, примеры таких файлов: <fstream>, <iostream>, <vector>, <cmath>
Если же используется написание с кавычками " " - значит компилятор будет искать необходимые файлы в папке проекта,
зачастую это либо файлы, в которые вынесены классы/стуктуры или какие-то наборы методов, но так же там могут лежать
какие-то библиотеки, которые не относятся к стандартным(std - STanarD).

При подключении какого либо файла к другому файлу - происходит копирование его содержимого, следовательно если случайно подключить данный файл
дважды, то произойдет дублирование имен, что приведет к неоднозначности и не позволит скомпилировать программу. Для защиты от этой ненасти 
используется такой инструмент как Header Guards. 
Допустим мы создаем файл Hello.h (Хорошей практикой будет вкинуть туда лишь декларирование функций класса, а реализацию вынести в Hello.cpp файл)
чтобы использовать Header Guards используются дерективы препроцессора #ifndef (IF NOT DEFINED) #define и #endif

#ifndef HELLO_H // (Значение HELLO_H может быть любым, но принято называть по имени файла в большом регистре и добавлять _H)
#define HELLO_H

// Декларирование класса
class Hello
{

};

#endif

-- #ifndef проверяет не определено ли уже имя HELLO_H, то есть не был ли данный файл подключен, если был - то ничего не произойдет, 
если не был - то препроцессор пойдет дальше и запишет с помощью #define новую константу HELLO_H, что в нашем случае будет означать,
что данный файл был уже подключен. Далее он подключает содержимое файла ( в нашем случае декларирование класса Hello ), и закрывает
условие #ifndef с помощью дерективы #endif